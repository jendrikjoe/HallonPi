/*
 * RingBuffer.h
 *
 *  Created on: Apr 13, 2015
 *      Author: Jendrik
 *      source: http://osix.net/modules/article/?id=464
 *      source-date: 13.04.15
 */
#ifndef RINGBUFFER_H_
#define RINGBUFFER_H_

#include <semaphore.h>
#include <>

template<typename T>
class RingBuffer{

public:
	RingBuffer(int size, sem_t readSemaphore) : HallonThread(){
		this->size = size;
		this->ringBuffer = new T[size];
		this->readable = false;
		this->readerPoint = 0;
		this->writerPoint = 0;
	}

	void writeElementToBuffer(T input) {
		if(writerPoint > size) writerPoint = 0;
		ringBuffer[writerPoint] = input;
		writerPoint++;
		if(writerPoint == readerPoint) readerPoint++;
		if(!readable) readable = true;
	}

	T getElement() {
		if(readerPoint == writerPoint) return -1;
		T buffer;
		buffer = ringBuffer[readerPoint];
		if(readerPoint++==writerPoint) readable = false;
		return buffer;
	}

	T getNewestElement(){
		if(readerPoint == writerPoint) return -1;
		return ringBuffer[writerPoint-1];
	}

	bool dataToRead(){
		return readable;
	}

	~RingBuffer() {
		delete ringBuffer;
	}

private:
	int size;
	T *ringBuffer;
	int writerPoint;
	int readerPoint;
	bool readable;


};




#endif
