/*
 * CommunicationPackage.cpp
 *
 *  Created on: Apr 11, 2015
 *      Author: Jendrik
 */


#include "CommunicationPackage.h"

namespace tcp{

	const char CommunicationPackage::starting[2] = {0x13, 0x7D};
	const char CommunicationPackage::ending[2] = {0x16, 0x7B};
	const unsigned short CommunicationPackage::timeStampPos = 2+sizeof(PackageType);
	const unsigned short CommunicationPackage::packageTypePos = 2;

	const unsigned short CommunicationPackage::floatBytes = FLOATSIZE;
	const unsigned short CommunicationPackage::doubleBytes = DOUBLESIZE;
	const unsigned short CommunicationPackage::uIntBytes = UINTSIZE;
	const unsigned short CommunicationPackage::uShortBytes = USHORTSIZE;

	//public:

	void CommunicationPackage::getFrame(char *output) const {
		for(int i=0; i<packageLength; i++) {
			output[i] = frame[i];
		}
	}

	bool CommunicationPackage::test(){
		unsigned int test = 98;
		char testArray[4];
		uInt2Char(test, testArray);
		if(test == char2UInt(testArray)) return true;

		return false;

	}

	//private:

	unsigned int CommunicationPackage::readTimeStamp(){
		return getUIntFromFrame(timeStampPos);
	}

	unsigned int CommunicationPackage::getUIntFromFrame(unsigned short position) {
		return this->char2UInt(&frame[position]);
	}

	void CommunicationPackage::putUIntToFrame(unsigned int input, unsigned short position) {
		this->uInt2Char(input, &frame[position]);
	}

	unsigned int CommunicationPackage::char2UInt(char *data) {
		unsigned int output = 0;
		output += data[0];
		output = (output << 8) + data[1];
		output = (output << 8) + data[2];
		output = (output << 8) + data[3];
		return output;
	}

	void CommunicationPackage::uInt2Char(unsigned int input, char* output) {
		unsigned int mask = 255;
		output[3] = (char) (input & mask);
		input >>=8;
		output[2] = (char) (input & mask);
		input >>=8;
		output[1] = (char) (input & mask);
		input >>=8;
		output[0] = (char) (input & mask);
	}


	float CommunicationPackage::getFlaotFromFrame(unsigned short position) {
		return this->char2Float(&frame[position]);
	}

	void CommunicationPackage::putFloatToFrame(unsigned int input,
			unsigned short position) {
		return this->float2Char(input, &frame[position]);
	}

	float CommunicationPackage::char2Float(char* data) {
	}

	void CommunicationPackage::float2Char(unsigned int input, char* output) {
	}


	//Constructors and Destructors:

	CommunicationPackage::CommunicationPackage() {
		this->packageLength = 0;
		this->packageType = DEFAULT_COM;
		this->valid = false;
		this->timeStamp = 0;
		this->frame = new char[1];
	}


	CommunicationPackage::CommunicationPackage(const CommunicationPackage &input) {
		this->valid = input.valid;
		this->timeStamp = input.timeStamp;
		this->packageLength = input.packageLength;
		this->packageType = input.packageType;

		this->frame = new char[packageLength];
		for(int i=0; i<packageLength; i++) {
			this->frame[i] = input.frame[i];
		}
	}


	CommunicationPackage::CommunicationPackage(char *input,
			PackageType type, unsigned short packageLength) {
		this->packageLength = packageLength;
		this->packageType = type;
		this->frame = new char[this->packageLength];
		for(int i=0; i<this->packageLength; i++) {
			this->frame[i] = input[i];
		}
		this->valid = true;
		this->timeStamp = this->readTimeStamp();



	}



	CommunicationPackage::~CommunicationPackage() {
		delete frame;
	}

}


